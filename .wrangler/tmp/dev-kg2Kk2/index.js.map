{
  "version": 3,
  "sources": ["../bundle-7gLalc/checked-fetch.js", "../../../src/index.ts", "../../../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-7gLalc/middleware-insertion-facade.js", "../../../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../bundle-7gLalc/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\91767\\OneDrive - The University of Texas at Dallas\\Documents\\GitHub\\cf_ai_newsletter\\.wrangler\\tmp\\dev-kg2Kk2",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\r\n * This is the main entrypoint for our Cloudflare Worker.\r\n * It will handle API requests for subscribing users and will eventually\r\n * be triggered by a cron job to send the daily briefing.\r\n */\r\nimport type { D1Database, ExecutionContext, Ai, ScheduledEvent } from '@cloudflare/workers-types';\r\n\r\nexport interface Env {\r\n\t// This binding gives us access to our D1 database.\r\n\tDB: D1Database;\r\n\t// This binding gives us access to the Workers AI models.\r\n\tAI: Ai;\r\n\t// This is a secret we will set to store our NewsAPI key.\r\n\tNEWS_API_KEY: string;\r\n\r\n\t// We will add more bindings for secrets and other services later.\r\n}\r\n\r\ninterface SubscriptionRequest {\r\n\temail: string;\r\n\tcategories: string[];\r\n}\r\n\r\nasync function handleSubscribe(request: Request, env: Env): Promise<Response> {\r\n\tconsole.log('handleSubscribe called');\r\n\t\r\n\ttry {\r\n\t\tconst body = await request.json();\r\n\t\tconsole.log('Request body:', body);\r\n\t\t\r\n\t\tconst { email, categories } = body as SubscriptionRequest;\r\n\r\n\t\t// Basic validation\r\n\t\tif (!email || !Array.isArray(categories) || categories.length === 0) {\r\n\t\t\tconsole.log('Validation failed');\r\n\t\t\treturn Response.json({ message: 'Invalid input: email and at least one category are required.' }, { status: 400 });\r\n\t\t}\r\n\r\n\t\t// Validate email format\r\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\t\tif (!emailRegex.test(email)) {\r\n\t\t\tconsole.log('Email format invalid');\r\n\t\t\treturn Response.json({ message: 'Invalid email format.' }, { status: 400 });\r\n\t\t}\r\n\r\n\t\tconsole.log(`Attempting to save subscription for email: ${email}`);\r\n\t\t\r\n\t\tconst categoriesJson = JSON.stringify(categories);\r\n\r\n\t\t// Use an \"upsert\" query:\r\n\t\t// - If the email doesn't exist, it inserts a new row.\r\n\t\t// - If the email already exists, it updates the categories for that user.\r\n\t\tconst stmt = env.DB.prepare(\r\n\t\t\t'INSERT INTO users (email, categories) VALUES (?1, ?2) ON CONFLICT(email) DO UPDATE SET categories = ?2'\r\n\t\t);\r\n\t\t\r\n\t\tconst result = await stmt.bind(email, categoriesJson).run();\r\n\t\tconsole.log('Database operation result:', result);\r\n\r\n\t\tif (result.success) {\r\n\t\t\treturn Response.json({ message: 'Configuration saved successfully!' }, { status: 200 });\r\n\t\t} else {\r\n\t\t\tconsole.error('Database operation failed:', result.error);\r\n\t\t\treturn Response.json({ message: 'Database operation failed.' }, { status: 500 });\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tconsole.error('Error in handleSubscribe:', e);\r\n\t\t// If the request body isn't valid JSON, this will catch it.\r\n\t\tif (e instanceof SyntaxError) {\r\n\t\t\treturn Response.json({ message: 'Invalid JSON in request body.' }, { status: 400 });\r\n\t\t}\r\n\t\t// Handle any other database or runtime errors\r\n\t\treturn Response.json({ message: 'An internal server error occurred.' }, { status: 500 });\r\n\t}\r\n}\r\n\r\n// HTML content for the main page\r\nconst HTML_CONTENT = `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Personalized Daily Briefing Agent</title>\r\n    <style>\r\n        body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; max-width: 600px; margin: 2rem auto; padding: 0 1rem; color: #333; }\r\n        h1 { color: #111; }\r\n        form { display: flex; flex-direction: column; gap: 1.25rem; background-color: #f9f9f9; padding: 1.5rem; border-radius: 8px; border: 1px solid #eee;}\r\n        label { font-weight: bold; }\r\n        input[type=\"email\"] { padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box; }\r\n        .categories { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 0.75rem; }\r\n        .category-item { display: flex; align-items: center; gap: 0.5rem; }\r\n        button { padding: 0.75rem; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 1rem; transition: background-color 0.2s; }\r\n        button:hover { background-color: #0056b3; }\r\n        button:disabled { background-color: #aaa; cursor: not-allowed; }\r\n        #message { margin-top: 1rem; padding: 1rem; border-radius: 4px; display: none; text-align: center; }\r\n        .success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\r\n        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Configure Your Daily Briefing</h1>\r\n    <p>Enter your email and select the news categories you're interested in.</p>\r\n\r\n    <form id=\"config-form\">\r\n        <div>\r\n            <label for=\"email\">Email Address:</label>\r\n            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n        </div>\r\n\r\n        <div>\r\n            <label>News Categories:</label>\r\n            <div class=\"categories\">\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"business\" name=\"category\" value=\"business\"><label for=\"business\">Business</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"entertainment\" name=\"category\" value=\"entertainment\"><label for=\"entertainment\">Entertainment</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"general\" name=\"category\" value=\"general\"><label for=\"general\">General</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"health\" name=\"category\" value=\"health\"><label for=\"health\">Health</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"science\" name=\"category\" value=\"science\"><label for=\"science\">Science</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"sports\" name=\"category\" value=\"sports\"><label for=\"sports\">Sports</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"technology\" name=\"category\" value=\"technology\"><label for=\"technology\">Technology</label></div>\r\n            </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" id=\"submit-btn\">Save Configuration</button>\r\n    </form>\r\n\r\n    <div id=\"message\"></div>\r\n\r\n    <script>\r\n        const form = document.getElementById('config-form');\r\n        const messageDiv = document.getElementById('message');\r\n        const submitBtn = document.getElementById('submit-btn');\r\n\r\n        form.addEventListener('submit', async (event) => {\r\n            event.preventDefault();\r\n            submitBtn.disabled = true;\r\n            submitBtn.textContent = 'Saving...';\r\n\r\n            const email = form.email.value;\r\n            const selectedCategories = Array.from(form.querySelectorAll('input[name=\"category\"]:checked')).map(cb => cb.value);\r\n\r\n            if (selectedCategories.length === 0) {\r\n                showMessage('Please select at least one category.', 'error');\r\n                submitBtn.disabled = false;\r\n                submitBtn.textContent = 'Save Configuration';\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch('/api/subscribe', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ email, categories: selectedCategories }),\r\n                });\r\n\r\n                console.log('Response status:', response.status);\r\n                console.log('Response ok:', response.ok);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\\`HTTP error! status: \\${response.status}\\`);\r\n                }\r\n\r\n                const result = await response.json();\r\n                console.log('Response data:', result);\r\n                showMessage(result.message, response.ok ? 'success' : 'error');\r\n\r\n            } catch (err) {\r\n                console.error('Fetch error:', err);\r\n                showMessage(\\`An unexpected error occurred: \\${err.message}\\`, 'error');\r\n            } finally {\r\n                submitBtn.disabled = false;\r\n                submitBtn.textContent = 'Save Configuration';\r\n            }\r\n        });\r\n\r\n        function showMessage(text, type) {\r\n            messageDiv.textContent = text;\r\n            messageDiv.className = type;\r\n            messageDiv.style.display = 'block';\r\n        }\r\n    </script>\r\n</body>\r\n</html>`;\r\n\r\n// The main fetch handler, which uses the router to handle incoming requests.\r\n// The .all('*', ...) route is a catch-all that returns a 404 for any\r\n// API route that doesn't match.\r\nexport default {\r\n\t/**\r\n\t * The main fetch handler. We wrap the router in a try/catch block to ensure\r\n\t * that we always return a response, even if the router encounters an error.\r\n\t * This prevents the \"The script will never generate a response\" error.\r\n\t */\r\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n\t\tconsole.log(`[FETCH] ${request.method} ${request.url}`);\r\n\t\tconst url = new URL(request.url);\r\n\t\tconsole.log(`[FETCH] Pathname: ${url.pathname}`);\r\n\t\t\r\n\t\t// Handle API routes\r\n\t\tif (url.pathname.startsWith('/api/')) {\r\n\t\t\tconsole.log('[FETCH] Handling API route');\r\n\t\t\t\r\n\t\t\t// Handle the subscribe route directly\r\n\t\t\tif (url.pathname === '/api/subscribe' && request.method === 'POST') {\r\n\t\t\t\tconsole.log('[FETCH] Handling subscribe route directly');\r\n\t\t\t\treturn await handleSubscribe(request, env);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Fallback for other API routes\r\n\t\t\treturn new Response('API Route Not Found', { status: 404 });\r\n\t\t}\r\n\t\t\r\n\t\t// For the root path, serve the HTML file\r\n\t\tif (url.pathname === '/') {\r\n\t\t\tconsole.log('[FETCH] Serving HTML content');\r\n\t\t\treturn new Response(HTML_CONTENT, {\r\n\t\t\t\theaders: { 'Content-Type': 'text/html' }\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t// For any other request, return a 404\r\n\t\tconsole.log('[FETCH] Returning 404');\r\n\t\treturn new Response('Not Found', { status: 404 });\r\n\t},\r\n\r\n\t/**\r\n\t * This is the scheduled handler, which will be executed by the cron trigger.\r\n\t */\r\n\tasync scheduled(event: ScheduledEvent, env: Env, ctx: ExecutionContext): Promise<void> {\r\n\t\tconsole.log(`Cron trigger fired at ${new Date(event.scheduledTime)}. Time to build the newsletter.`);\r\n\t\t// In the next step, we'll add the logic to fetch news, summarize, and send emails.\r\n\t},\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\91767\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\91767\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\.wrangler\\\\tmp\\\\bundle-7gLalc\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\91767\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\.wrangler\\\\tmp\\\\bundle-7gLalc\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\.wrangler\\\\tmp\\\\bundle-7gLalc\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
