{
  "version": 3,
  "sources": ["../bundle-gNh8F9/checked-fetch.js", "../../../src/index.ts", "../../../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-gNh8F9/middleware-insertion-facade.js", "../../../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../bundle-gNh8F9/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\91767\\OneDrive - The University of Texas at Dallas\\Documents\\GitHub\\cf_ai_newsletter\\.wrangler\\tmp\\dev-9FuE2S",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\r\n * This is the main entrypoint for our Cloudflare Worker.\r\n * It will handle API requests for subscribing users and will eventually\r\n * be triggered by a cron job to send the daily briefing.\r\n */\r\nimport type { D1Database, ExecutionContext, ScheduledEvent } from '@cloudflare/workers-types';\r\n\r\nexport interface Env {\r\n\t// This binding gives us access to our D1 database.\r\n\tDB: D1Database;\r\n\t// This binding gives us access to Workers AI\r\n\tAI: Ai;\r\n\t// This is a secret we will set to store our NewsAPI key.\r\n\tNEWS_API_KEY: string;\r\n\t// Optional: LLM API key if using external service\r\n\tLLM_API_KEY?: string;\r\n\r\n\t// We will add more bindings for secrets and other services later.\r\n}\r\n\r\ninterface SubscriptionRequest {\r\n\temail: string;\r\n\tcategories: string[];\r\n}\r\n\r\ninterface NewsArticle {\r\n\ttitle: string;\r\n\tdescription: string;\r\n\tcontent: string;\r\n\turl: string;\r\n\tsource: {\r\n\t\tname: string;\r\n\t};\r\n\tpublishedAt: string;\r\n}\r\n\r\ninterface NewsAPIResponse {\r\n\tarticles: NewsArticle[];\r\n\ttotalResults: number;\r\n}\r\n\r\n/**\r\n * Fetches news articles from NewsAPI for the given categories\r\n */\r\nasync function fetchNewsForCategories(categories: string[], apiKey: string): Promise<NewsArticle[]> {\r\n\tconst allArticles: NewsArticle[] = [];\r\n\t\r\n\tfor (const category of categories) {\r\n\t\ttry {\r\n\t\tconsole.log(`\uD83D\uDD0D Fetching news for category: ${category}`);\r\n\t\t\r\n\t\t// NewsAPI endpoint for top headlines by category\r\n\t\tconst url = `https://newsapi.org/v2/top-headlines?category=${category}&country=us&pageSize=5&apiKey=${apiKey}`;\r\n\t\t\r\n\t\tconsole.log(`\uD83D\uDCE1 Making request to: ${url.replace(apiKey, 'API_KEY_HIDDEN')}`);\r\n\t\tconsole.log(`\uD83D\uDD11 Using API key: ${apiKey.substring(0, 8)}...${apiKey.substring(apiKey.length - 4)}`);\r\n\t\t\r\n\t\tconst response = await fetch(url, {\r\n\t\t\theaders: {\r\n\t\t\t\t'User-Agent': 'CF-AI-Newsletter/1.0 (Cloudflare Worker)'\r\n\t\t\t}\r\n\t\t});\r\n\t\tconsole.log(`Response status: ${response.status} ${response.statusText}`);\t\tif (!response.ok) {\r\n\t\t\tconst errorText = await response.text();\r\n\t\t\tconsole.error(`\u274C Failed to fetch news for ${category}:`, response.status, errorText);\r\n\t\t\tconsole.error(`\u274C Full error response:`, errorText);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\tconst data = await response.json() as NewsAPIResponse;\r\n\t\tconsole.log(`\uD83D\uDCCA Found ${data.articles?.length || 0} articles for ${category}`);\r\n\t\tconsole.log(`\uD83D\uDCCA Total results available: ${data.totalResults || 'unknown'}`);\r\n\t\tconsole.log(`\uD83D\uDCCB Raw API response for ${category}:`, JSON.stringify(data, null, 2));\t\t\tif (!data.articles || data.articles.length === 0) {\r\n\t\t\t\tconsole.log(`No articles returned for ${category}`);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Add category info to articles and filter out articles without content\r\n\t\t\tconst categoryArticles = data.articles\r\n\t\t\t\t.filter(article => {\r\n\t\t\t\t\tconst hasContent = article.content && article.content !== '[Removed]';\r\n\t\t\t\t\tif (!hasContent) {\r\n\t\t\t\t\t\tconsole.log(`Skipping article without content: ${article.title}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn hasContent;\r\n\t\t\t\t})\r\n\t\t\t\t.map(article => ({\r\n\t\t\t\t\t...article,\r\n\t\t\t\t\tcategory: category\r\n\t\t\t\t}));\r\n\t\t\t\r\n\t\t\tconsole.log(`Filtered to ${categoryArticles.length} articles with content for ${category}`);\r\n\t\t\tallArticles.push(...categoryArticles);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Error fetching news for category ${category}:`, error);\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn allArticles;\r\n}\r\n\r\n/**\r\n * Uses external LLM API to summarize a news article\r\n */\r\n/**\r\n * Uses Workers AI with Llama 2 to summarize a news article\r\n */\r\nasync function summarizeArticleWithLlama(article: NewsArticle, ai: Ai): Promise<string> {\r\n\ttry {\r\n\t\tconsole.log(`\uD83E\uDD16 Summarizing article with Llama 2: ${article.title}`);\r\n\t\t\r\n\t\t// Create a prompt with the article content\r\n\t\tconst articleContent = article.content || article.description || 'No content available';\r\n\t\tconst prompt = `Summarize this news article in exactly 1-2 clear, concise sentences. Focus on the main facts and key information.\r\n\r\nTitle: ${article.title}\r\nContent: ${articleContent.substring(0, 1000)}...\r\nSource: ${article.source.name}\r\n\r\nSummary:`;\r\n\r\n\t\t// Use Workers AI with a reliable Llama model\r\n\t\tconst modelName = '@cf/meta/llama-2-7b-chat-int8';\r\n\t\tconst response = await ai.run(modelName as any, {\r\n\t\t\tprompt: `${prompt}\\n\\nAssistant: Here's a concise summary:`\r\n\t\t}) as any;\r\n\r\n\t\t// Handle the response properly - Workers AI returns response in different formats\r\n\t\tlet summary: string;\r\n\t\tif (typeof response === 'string') {\r\n\t\t\tsummary = response.trim();\r\n\t\t} else if (response && typeof response === 'object' && 'response' in response) {\r\n\t\t\tsummary = (response as any).response?.trim();\r\n\t\t} else {\r\n\t\t\tsummary = `${article.title}: Summary not available`;\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(`\u2705 Generated summary: ${summary.substring(0, 100)}...`);\r\n\t\treturn summary;\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.error(`\u274C Error summarizing article \"${article.title}\":`, error);\r\n\t\t\r\n\t\t// Fallback to a simple but intelligent summary\r\n\t\tconst fallbackSummary = createFallbackSummary(article);\r\n\t\tconsole.log(`\uD83D\uDD04 Using fallback summary: ${fallbackSummary.substring(0, 100)}...`);\r\n\t\treturn fallbackSummary;\r\n\t}\r\n}\r\n\r\n/**\r\n * Creates a fallback summary when AI is unavailable\r\n */\r\nfunction createFallbackSummary(article: NewsArticle): string {\r\n\tconst description = article.description || '';\r\n\tconst content = article.content || '';\r\n\t\r\n\t// Try to create a smart summary from available content\r\n\tif (description && description.length > 10 && description !== '[Removed]') {\r\n\t\t// Use the description if it's meaningful\r\n\t\treturn `${article.source.name} reports: ${description}`;\r\n\t} else if (content && content.length > 50) {\r\n\t\t// Extract first meaningful sentence from content\r\n\t\tconst sentences = content.split(/[.!?]+/);\r\n\t\tconst firstSentence = sentences[0]?.trim();\r\n\t\tif (firstSentence && firstSentence.length > 20) {\r\n\t\t\treturn `${article.source.name}: ${firstSentence}.`;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Last resort: use title with source\r\n\treturn `${article.source.name}: ${article.title}`;\r\n}\r\n\r\n/**\r\n * Test NewsAPI integration\r\n */\r\nasync function testNewsAPI(request: Request, env: Env): Promise<Response> {\r\n\ttry {\r\n\t\t// Get API key from request body or use environment variable\r\n\t\tconst body = await request.json().catch(() => ({})) as any;\r\n\t\tconst apiKey = body.apiKey || env.NEWS_API_KEY;\r\n\t\t\r\n\t\tif (!apiKey) {\r\n\t\t\treturn Response.json({ \r\n\t\t\t\tmessage: 'NewsAPI key is required. Send it in the request body as {\"apiKey\": \"your-key\"} or set NEWS_API_KEY environment variable.',\r\n\t\t\t\texample: {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\tbody: '{\"apiKey\": \"your-newsapi-key\", \"categories\": [\"technology\", \"science\"]}'\r\n\t\t\t\t}\r\n\t\t\t}, { status: 400 });\r\n\t\t}\r\n\r\n\t\t// Test categories from request or use defaults\r\n\t\tconst categories = body.categories || ['technology', 'science'];\r\n\t\t\r\n\t\tconsole.log(`Testing NewsAPI with categories: ${categories.join(', ')}`);\r\n\t\tconsole.log(`API Key provided: ${apiKey.substring(0, 8)}...${apiKey.substring(apiKey.length - 4)}`);\r\n\t\t\r\n\t\t// Fetch news articles\r\n\t\tconst articles = await fetchNewsForCategories(categories, apiKey);\r\n\t\t\r\n\t\tconsole.log(`Total articles fetched: ${articles.length}`);\r\n\t\t\r\n\t\tif (articles.length === 0) {\r\n\t\t\treturn Response.json({ \r\n\t\t\t\tmessage: 'No articles found. This could mean:',\r\n\t\t\t\tpossibleCauses: [\r\n\t\t\t\t\t'Invalid API key - check if your NewsAPI key is correct',\r\n\t\t\t\t\t'API rate limit exceeded - free tier allows 100 requests/day',\r\n\t\t\t\t\t'No articles available for the selected categories today',\r\n\t\t\t\t\t'Network connectivity issue',\r\n\t\t\t\t\t'NewsAPI service temporarily unavailable'\r\n\t\t\t\t],\r\n\t\t\t\tcategories: categories,\r\n\t\t\t\tdebugging: {\r\n\t\t\t\t\tapiKeyFormat: `${apiKey.substring(0, 8)}...${apiKey.substring(apiKey.length - 4)}`,\r\n\t\t\t\t\ttimestamp: new Date().toISOString()\r\n\t\t\t\t}\r\n\t\t\t}, { status: 404 });\r\n\t\t}\r\n\r\n\t\t// Generate summaries for the articles\r\n\t\tconst summaries = [];\r\n\t\tfor (const article of articles.slice(0, 5)) { // Limit to 5 for testing\r\n\t\t\tconst summary = await summarizeArticleWithLlama(article, env.AI);\r\n\t\t\tsummaries.push({\r\n\t\t\t\ttitle: article.title,\r\n\t\t\t\tsummary: summary,\r\n\t\t\t\turl: article.url,\r\n\t\t\t\tsource: article.source.name,\r\n\t\t\t\tcategory: (article as any).category || 'general'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn Response.json({ \r\n\t\t\tmessage: `Successfully fetched ${articles.length} articles from NewsAPI!`,\r\n\t\t\tcategories: categories,\r\n\t\t\tarticlesFound: articles.length,\r\n\t\t\tsampleSummaries: summaries,\r\n\t\t\ttestSuccess: true\r\n\t\t});\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.error('NewsAPI test failed:', error);\r\n\t\treturn Response.json({ \r\n\t\t\tmessage: 'NewsAPI test failed',\r\n\t\t\terror: error instanceof Error ? error.message : String(error)\r\n\t\t}, { status: 500 });\r\n\t}\r\n}\r\n\r\nasync function handleSubscribe(request: Request, env: Env): Promise<Response> {\r\n\tconsole.log('handleSubscribe called');\r\n\t\r\n\ttry {\r\n\t\tconst body = await request.json();\r\n\t\tconsole.log('Request body:', body);\r\n\t\t\r\n\t\tconst { email, categories } = body as SubscriptionRequest;\r\n\r\n\t\t// Basic validation\r\n\t\tif (!email || !Array.isArray(categories) || categories.length === 0) {\r\n\t\t\tconsole.log('Validation failed');\r\n\t\t\treturn Response.json({ message: 'Invalid input: email and at least one category are required.' }, { status: 400 });\r\n\t\t}\r\n\r\n\t\t// Validate email format\r\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\t\tif (!emailRegex.test(email)) {\r\n\t\t\tconsole.log('Email format invalid');\r\n\t\t\treturn Response.json({ message: 'Invalid email format.' }, { status: 400 });\r\n\t\t}\r\n\r\n\t\tconsole.log(`Attempting to save subscription for email: ${email}`);\r\n\t\t\r\n\t\tconst categoriesJson = JSON.stringify(categories);\r\n\r\n\t\t// Use an \"upsert\" query:\r\n\t\t// - If the email doesn't exist, it inserts a new row.\r\n\t\t// - If the email already exists, it updates the categories for that user.\r\n\t\tconst stmt = env.DB.prepare(\r\n\t\t\t'INSERT INTO users (email, categories) VALUES (?1, ?2) ON CONFLICT(email) DO UPDATE SET categories = ?2'\r\n\t\t);\r\n\t\t\r\n\t\tconst result = await stmt.bind(email, categoriesJson).run();\r\n\t\tconsole.log('Database operation result:', result);\r\n\r\n\t\tif (result.success) {\r\n\t\t\treturn Response.json({ message: 'Configuration saved successfully!' }, { status: 200 });\r\n\t\t} else {\r\n\t\t\tconsole.error('Database operation failed:', result.error);\r\n\t\t\treturn Response.json({ message: 'Database operation failed.' }, { status: 500 });\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tconsole.error('Error in handleSubscribe:', e);\r\n\t\t// If the request body isn't valid JSON, this will catch it.\r\n\t\tif (e instanceof SyntaxError) {\r\n\t\t\treturn Response.json({ message: 'Invalid JSON in request body.' }, { status: 400 });\r\n\t\t}\r\n\t\t// Handle any other database or runtime errors\r\n\t\treturn Response.json({ message: 'An internal server error occurred.' }, { status: 500 });\r\n\t}\r\n}\r\n\r\n// HTML content for the main page\r\nconst HTML_CONTENT = `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Personalized Daily Briefing Agent</title>\r\n    <style>\r\n        body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; max-width: 600px; margin: 2rem auto; padding: 0 1rem; color: #333; }\r\n        h1 { color: #111; }\r\n        form { display: flex; flex-direction: column; gap: 1.25rem; background-color: #f9f9f9; padding: 1.5rem; border-radius: 8px; border: 1px solid #eee;}\r\n        label { font-weight: bold; }\r\n        input[type=\"email\"] { padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px; width: 100%; box-sizing: border-box; }\r\n        .categories { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 0.75rem; }\r\n        .category-item { display: flex; align-items: center; gap: 0.5rem; }\r\n        button { padding: 0.75rem; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 1rem; transition: background-color 0.2s; }\r\n        button:hover { background-color: #0056b3; }\r\n        button:disabled { background-color: #aaa; cursor: not-allowed; }\r\n        #message { margin-top: 1rem; padding: 1rem; border-radius: 4px; display: none; text-align: center; }\r\n        .success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\r\n        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Configure Your Daily Briefing</h1>\r\n    <p>Enter your email and select the news categories you're interested in.</p>\r\n\r\n    <form id=\"config-form\">\r\n        <div>\r\n            <label for=\"email\">Email Address:</label>\r\n            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n        </div>\r\n\r\n        <div>\r\n            <label>News Categories:</label>\r\n            <div class=\"categories\">\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"business\" name=\"category\" value=\"business\"><label for=\"business\">Business</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"entertainment\" name=\"category\" value=\"entertainment\"><label for=\"entertainment\">Entertainment</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"general\" name=\"category\" value=\"general\"><label for=\"general\">General</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"health\" name=\"category\" value=\"health\"><label for=\"health\">Health</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"science\" name=\"category\" value=\"science\"><label for=\"science\">Science</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"sports\" name=\"category\" value=\"sports\"><label for=\"sports\">Sports</label></div>\r\n                <div class=\"category-item\"><input type=\"checkbox\" id=\"technology\" name=\"category\" value=\"technology\"><label for=\"technology\">Technology</label></div>\r\n            </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" id=\"submit-btn\">Save Configuration</button>\r\n    </form>\r\n\r\n    <div id=\"message\"></div>\r\n    \r\n    <!-- NewsAPI Test Section -->\r\n    <div style=\"margin-top: 2rem; padding: 1.5rem; background-color: #f0f8ff; border-radius: 8px; border: 1px solid #add8e6;\">\r\n        <h2>\uD83E\uDDEA Test NewsAPI Integration</h2>\r\n        <p>Test your NewsAPI key and see live news articles:</p>\r\n        <form id=\"news-test-form\">\r\n            <div style=\"margin-bottom: 1rem;\">\r\n                <label for=\"api-key\">NewsAPI Key:</label>\r\n                <input type=\"text\" id=\"api-key\" placeholder=\"Enter your NewsAPI key\" style=\"width: 100%; padding: 0.5rem; margin-top: 0.5rem;\" value=\"65833a57006a47fbb61a092994a1df3c\">\r\n            </div>\r\n            <button type=\"submit\" id=\"test-btn\">Test NewsAPI</button>\r\n        </form>\r\n        <div id=\"news-results\" style=\"margin-top: 1rem; display: none; padding: 1rem; background-color: #fff; border-radius: 4px; max-height: 400px; overflow-y: auto;\"></div>\r\n    </div>\r\n\r\n    <script>\r\n        const form = document.getElementById('config-form');\r\n        const messageDiv = document.getElementById('message');\r\n        const submitBtn = document.getElementById('submit-btn');\r\n\r\n        form.addEventListener('submit', async (event) => {\r\n            event.preventDefault();\r\n            submitBtn.disabled = true;\r\n            submitBtn.textContent = 'Saving...';\r\n\r\n            const email = form.email.value;\r\n            const selectedCategories = Array.from(form.querySelectorAll('input[name=\"category\"]:checked')).map(cb => cb.value);\r\n\r\n            if (selectedCategories.length === 0) {\r\n                showMessage('Please select at least one category.', 'error');\r\n                submitBtn.disabled = false;\r\n                submitBtn.textContent = 'Save Configuration';\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch('/api/subscribe', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ email, categories: selectedCategories }),\r\n                });\r\n\r\n                console.log('Response status:', response.status);\r\n                console.log('Response ok:', response.ok);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\\`HTTP error! status: \\${response.status}\\`);\r\n                }\r\n\r\n                const result = await response.json();\r\n                console.log('Response data:', result);\r\n                showMessage(result.message, response.ok ? 'success' : 'error');\r\n\r\n            } catch (err) {\r\n                console.error('Fetch error:', err);\r\n                showMessage(\\`An unexpected error occurred: \\${err.message}\\`, 'error');\r\n            } finally {\r\n                submitBtn.disabled = false;\r\n                submitBtn.textContent = 'Save Configuration';\r\n            }\r\n        });\r\n\r\n        function showMessage(text, type) {\r\n            messageDiv.textContent = text;\r\n            messageDiv.className = type;\r\n            messageDiv.style.display = 'block';\r\n        }\r\n\r\n        // NewsAPI Test Form Handler\r\n        const newsTestForm = document.getElementById('news-test-form');\r\n        const newsResults = document.getElementById('news-results');\r\n        const testBtn = document.getElementById('test-btn');\r\n\r\n        newsTestForm.addEventListener('submit', async (event) => {\r\n            event.preventDefault();\r\n            testBtn.disabled = true;\r\n            testBtn.textContent = 'Testing...';\r\n            newsResults.style.display = 'none';\r\n\r\n            const apiKey = document.getElementById('api-key').value;\r\n            \r\n            if (!apiKey) {\r\n                showNewsResults('Please enter your NewsAPI key', 'error');\r\n                testBtn.disabled = false;\r\n                testBtn.textContent = 'Test NewsAPI';\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch('/api/test-news', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ \r\n                        apiKey: apiKey,\r\n                        categories: ['technology', 'science']\r\n                    }),\r\n                });\r\n\r\n                const result = await response.json();\r\n                \r\n                if (response.ok) {\r\n                    showNewsResults(formatNewsResults(result), 'success');\r\n                } else {\r\n                    showNewsResults(result.message || 'Test failed', 'error');\r\n                }\r\n\r\n            } catch (err) {\r\n                showNewsResults(\\`Error testing NewsAPI: \\${err.message}\\`, 'error');\r\n            } finally {\r\n                testBtn.disabled = false;\r\n                testBtn.textContent = 'Test NewsAPI';\r\n            }\r\n        });\r\n\r\n        function showNewsResults(content, type) {\r\n            newsResults.innerHTML = content;\r\n            newsResults.className = type;\r\n            newsResults.style.display = 'block';\r\n        }\r\n\r\n        function formatNewsResults(result) {\r\n            let html = \\`<h3>\u2705 Success! Found \\${result.articlesFound} articles</h3>\\`;\r\n            html += \\`<p><strong>Categories tested:</strong> \\${result.categories.join(', ')}</p>\\`;\r\n            \r\n            if (result.sampleSummaries && result.sampleSummaries.length > 0) {\r\n                html += \\`<h4>\uD83D\uDCF0 Sample Articles:</h4>\\`;\r\n                result.sampleSummaries.forEach((item, index) => {\r\n                    html += \\`\r\n                        <div style=\"margin: 1rem 0; padding: 1rem; border-left: 3px solid #007bff; background-color: #f8f9fa;\">\r\n                            <strong>\\${index + 1}. \\${item.title}</strong><br>\r\n                            <em>Source: \\${item.source} | Category: \\${item.category}</em><br>\r\n                            <p style=\"margin: 0.5rem 0;\">\\${item.summary}</p>\r\n                            <a href=\"\\${item.url}\" target=\"_blank\" style=\"color: #007bff;\">Read full article \u2192</a>\r\n                        </div>\r\n                    \\`;\r\n                });\r\n            }\r\n            \r\n            return html;\r\n        }\r\n    </script>\r\n</body>\r\n</html>`;\r\n\r\n// The main fetch handler, which uses the router to handle incoming requests.\r\n// The .all('*', ...) route is a catch-all that returns a 404 for any\r\n// API route that doesn't match.\r\nexport default {\r\n\t/**\r\n\t * The main fetch handler. We wrap the router in a try/catch block to ensure\r\n\t * that we always return a response, even if the router encounters an error.\r\n\t * This prevents the \"The script will never generate a response\" error.\r\n\t */\r\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n\t\tconsole.log(`[FETCH] ${request.method} ${request.url}`);\r\n\t\tconst url = new URL(request.url);\r\n\t\tconsole.log(`[FETCH] Pathname: ${url.pathname}`);\r\n\t\t\r\n\t\t// Handle API routes\r\n\t\tif (url.pathname.startsWith('/api/')) {\r\n\t\t\tconsole.log('[FETCH] Handling API route');\r\n\t\t\t\r\n\t\t\t// Handle the subscribe route directly\r\n\t\t\tif (url.pathname === '/api/subscribe' && request.method === 'POST') {\r\n\t\t\t\tconsole.log('[FETCH] Handling subscribe route directly');\r\n\t\t\t\treturn await handleSubscribe(request, env);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Simple test endpoint\r\n\t\t\tif (url.pathname === '/api/hello' && request.method === 'GET') {\r\n\t\t\t\tconsole.log('[FETCH] Hello endpoint called');\r\n\t\t\t\treturn Response.json({ message: 'Hello! Server is working!', timestamp: new Date().toISOString() });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Test NewsAPI endpoint\r\n\t\t\tif (url.pathname === '/api/test-news' && request.method === 'POST') {\r\n\t\t\t\tconsole.log('[FETCH] Testing NewsAPI integration');\r\n\t\t\t\treturn await testNewsAPI(request, env);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Test endpoint to manually trigger newsletter generation\r\n\t\t\tif (url.pathname === '/api/test-newsletter' && request.method === 'POST') {\r\n\t\t\t\tconsole.log('[FETCH] Testing newsletter generation');\r\n\t\t\t\treturn await testNewsletterGeneration(env);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Fallback for other API routes\r\n\t\t\treturn new Response('API Route Not Found', { status: 404 });\r\n\t\t}\r\n\t\t\r\n\t\t// For the root path, serve the HTML file\r\n\t\tif (url.pathname === '/') {\r\n\t\t\tconsole.log('[FETCH] Serving HTML content');\r\n\t\t\treturn new Response(HTML_CONTENT, {\r\n\t\t\t\theaders: { 'Content-Type': 'text/html' }\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t// For any other request, return a 404\r\n\t\tconsole.log('[FETCH] Returning 404');\r\n\t\treturn new Response('Not Found', { status: 404 });\r\n\t},\r\n\r\n\t/**\r\n\t * This is the scheduled handler, which will be executed by the cron trigger.\r\n\t */\r\n\tasync scheduled(event: ScheduledEvent, env: Env, ctx: ExecutionContext): Promise<void> {\r\n\t\tconsole.log(`Cron trigger fired at ${new Date(event.scheduledTime)}. Time to build the newsletter.`);\r\n\t\t\r\n\t\ttry {\r\n\t\t\t// Check if we have the required API key\r\n\t\t\tif (!env.NEWS_API_KEY) {\r\n\t\t\t\tconsole.error('NEWS_API_KEY is not set in environment variables');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Fetch all users from the database\r\n\t\t\tconsole.log('Fetching all users from database...');\r\n\t\t\tconst usersResult = await env.DB.prepare('SELECT email, categories FROM users').all();\r\n\t\t\t\r\n\t\t\tif (!usersResult.success) {\r\n\t\t\t\tconsole.error('Failed to fetch users from database');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst users = usersResult.results;\r\n\t\t\tconsole.log(`Found ${users.length} users to process`);\r\n\r\n\t\t\t// Process each user\r\n\t\t\tfor (const user of users) {\r\n\t\t\t\tawait processUserNewsletter(user, env);\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log('Newsletter processing completed successfully');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error in scheduled newsletter processing:', error);\r\n\t\t}\r\n\t},\r\n};\r\n\r\n/**\r\n * Processes newsletter generation for a single user\r\n */\r\nasync function processUserNewsletter(user: any, env: Env): Promise<void> {\r\n\ttry {\r\n\t\tconst email = user.email as string;\r\n\t\tconst categories = JSON.parse(user.categories as string) as string[];\r\n\t\t\r\n\t\tconsole.log(`Processing newsletter for ${email} with categories: ${categories.join(', ')}`);\r\n\r\n\t\t// Fetch news articles for user's categories\r\n\t\tconst articles = await fetchNewsForCategories(categories, env.NEWS_API_KEY);\r\n\t\t\r\n\t\tif (articles.length === 0) {\r\n\t\t\tconsole.log(`No articles found for ${email}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log(`Found ${articles.length} articles for ${email}`);\r\n\r\n\t\t// Summarize each article using external LLM\r\n\t\tconst summaries: { article: NewsArticle; summary: string; category: string }[] = [];\r\n\t\t\r\n\t\tfor (const article of articles.slice(0, 10)) { // Limit to 10 articles per user\r\n\t\t\tconst summary = await summarizeArticleWithLlama(article, env.AI);\r\n\t\t\tsummaries.push({\r\n\t\t\t\tarticle,\r\n\t\t\t\tsummary,\r\n\t\t\t\tcategory: (article as any).category || 'general'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Generate and format the newsletter\r\n\t\tconst newsletter = formatNewsletter(email, summaries);\r\n\t\t\r\n\t\t// For now, just log the newsletter (in next steps, you would email it)\r\n\t\tconsole.log(`Newsletter generated for ${email}:`);\r\n\t\tconsole.log(newsletter);\r\n\t\tconsole.log('--- End of Newsletter ---\\n');\r\n\r\n\t} catch (error) {\r\n\t\tconsole.error(`Error processing newsletter for user:`, error);\r\n\t}\r\n}\r\n\r\n/**\r\n * Formats the newsletter with summaries organized by category\r\n */\r\nfunction formatNewsletter(email: string, summaries: { article: NewsArticle; summary: string; category: string }[]): string {\r\n\tconst date = new Date().toDateString();\r\n\t\r\n\t// Group summaries by category\r\n\tconst categorizedSummaries: { [category: string]: { article: NewsArticle; summary: string }[] } = {};\r\n\t\r\n\tfor (const item of summaries) {\r\n\t\tif (!categorizedSummaries[item.category]) {\r\n\t\t\tcategorizedSummaries[item.category] = [];\r\n\t\t}\r\n\t\tcategorizedSummaries[item.category].push({\r\n\t\t\tarticle: item.article,\r\n\t\t\tsummary: item.summary\r\n\t\t});\r\n\t}\r\n\r\n\tlet newsletter = `\uD83D\uDDDE\uFE0F Your Daily AI-Powered News Briefing - ${date}\\n`;\r\n\tnewsletter += `\uD83D\uDCE7 For: ${email}\\n\\n`;\r\n\r\n\t// Add summaries organized by category\r\n\tfor (const [category, items] of Object.entries(categorizedSummaries)) {\r\n\t\tnewsletter += `\uD83D\uDCC2 ${category.toUpperCase()}\\n`;\r\n\t\tnewsletter += `${'='.repeat(category.length + 2)}\\n\\n`;\r\n\r\n\t\tfor (let i = 0; i < items.length; i++) {\r\n\t\t\tconst { article, summary } = items[i];\r\n\t\t\tnewsletter += `${i + 1}. ${article.title}\\n`;\r\n\t\t\tnewsletter += `   \uD83E\uDD16 AI Summary: ${summary}\\n`;\r\n\t\t\tnewsletter += `   \uD83D\uDD17 Read more: ${article.url}\\n`;\r\n\t\t\tnewsletter += `   \uD83D\uDCF0 Source: ${article.source.name}\\n\\n`;\r\n\t\t}\r\n\t}\r\n\r\n\tnewsletter += `\\n\uD83D\uDCDD This newsletter was generated using Cloudflare Workers AI\\n`;\r\n\tnewsletter += `\u2699\uFE0F Powered by NewsAPI and Llama 3 AI\\n`;\r\n\r\n\treturn newsletter;\r\n}\r\n\r\n/**\r\n * Test endpoint to manually trigger newsletter generation\r\n */\r\nasync function testNewsletterGeneration(env: Env): Promise<Response> {\r\n\ttry {\r\n\t\t// For testing, we'll use a mock API key or check for environment variable\r\n\t\tconst testApiKey = env.NEWS_API_KEY || 'test-api-key';\r\n\t\t\r\n\t\t// Fetch one user from database\r\n\t\tconst usersResult = await env.DB.prepare('SELECT email, categories FROM users LIMIT 1').all();\r\n\t\t\r\n\t\tif (!usersResult.success || usersResult.results.length === 0) {\r\n\t\t\treturn Response.json({ \r\n\t\t\t\tmessage: 'No users found in database. Please subscribe first using the form.' \r\n\t\t\t}, { status: 404 });\r\n\t\t}\r\n\r\n\t\tconst user = usersResult.results[0];\r\n\t\tconst email = user.email as string;\r\n\t\tconst categories = JSON.parse(user.categories as string) as string[];\r\n\r\n\t\t// If we don't have a real API key, simulate with mock data\r\n\t\tif (!env.NEWS_API_KEY) {\r\n\t\t\treturn await testWithMockData(email, categories, env);\r\n\t\t}\r\n\r\n\t\t// Process newsletter for the test user\r\n\t\tawait processUserNewsletter(user, env);\r\n\t\t\r\n\t\treturn Response.json({ \r\n\t\t\tmessage: `Newsletter generated successfully for ${email}. Check the console logs for the output.`,\r\n\t\t\tcategories: categories\r\n\t\t});\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.error('Error in test newsletter generation:', error);\r\n\t\treturn Response.json({ \r\n\t\t\tmessage: 'Error generating test newsletter',\r\n\t\t\terror: error instanceof Error ? error.message : String(error)\r\n\t\t}, { status: 500 });\r\n\t}\r\n}\r\n\r\n/**\r\n * Test with mock data when no real API key is available\r\n */\r\nasync function testWithMockData(email: string, categories: string[], env: Env): Promise<Response> {\r\n\ttry {\r\n\t\t// Create mock articles\r\n\t\tconst mockArticles: NewsArticle[] = [\r\n\t\t\t{\r\n\t\t\t\ttitle: \"AI Technology Breakthrough in 2025\",\r\n\t\t\t\tdescription: \"Researchers announce major advancement in artificial intelligence capabilities with new transformer architecture.\",\r\n\t\t\t\tcontent: \"Scientists at leading research institutions have developed a new AI architecture that shows significant improvements in reasoning and understanding. The breakthrough could revolutionize how we interact with AI systems.\",\r\n\t\t\t\turl: \"https://example.com/ai-breakthrough\",\r\n\t\t\t\tsource: { name: \"Tech News Daily\" },\r\n\t\t\t\tpublishedAt: new Date().toISOString()\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: \"Climate Change Solutions Show Promise\",\r\n\t\t\t\tdescription: \"New renewable energy technology could help reduce carbon emissions by 50% over the next decade.\",\r\n\t\t\t\tcontent: \"A consortium of environmental scientists has developed innovative solar panel technology that is both more efficient and cheaper to produce than current methods.\",\r\n\t\t\t\turl: \"https://example.com/climate-solution\",\r\n\t\t\t\tsource: { name: \"Environmental Report\" },\r\n\t\t\t\tpublishedAt: new Date().toISOString()\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t// Summarize each article using AI\r\n\t\tconst summaries: { article: NewsArticle; summary: string; category: string }[] = [];\r\n\t\t\r\n\t\tfor (let i = 0; i < mockArticles.length; i++) {\r\n\t\t\tconst article = mockArticles[i];\r\n\t\t\tconst category = categories[i % categories.length]; // Cycle through user's categories\r\n\t\t\t\r\n\t\t\tconst summary = await summarizeArticleWithLlama(article, env.AI);\r\n\t\t\tsummaries.push({\r\n\t\t\t\tarticle,\r\n\t\t\t\tsummary,\r\n\t\t\t\tcategory\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Generate newsletter\r\n\t\tconst newsletter = formatNewsletter(email, summaries);\r\n\t\t\r\n\t\tconsole.log(`TEST NEWSLETTER GENERATED:`);\r\n\t\tconsole.log(newsletter);\r\n\t\t\r\n\t\treturn Response.json({ \r\n\t\t\tmessage: `Test newsletter generated successfully for ${email}!`,\r\n\t\t\tnewsletter: newsletter,\r\n\t\t\tarticlesProcessed: mockArticles.length\r\n\t\t});\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.error('Error in mock newsletter generation:', error);\r\n\t\treturn Response.json({ \r\n\t\t\tmessage: 'Error generating mock newsletter',\r\n\t\t\terror: error instanceof Error ? error.message : String(error)\r\n\t\t}, { status: 500 });\r\n\t}\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\91767\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\91767\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\.wrangler\\\\tmp\\\\bundle-gNh8F9\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\91767\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\.wrangler\\\\tmp\\\\bundle-gNh8F9\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\91767\\\\OneDrive - The University of Texas at Dallas\\\\Documents\\\\GitHub\\\\cf_ai_newsletter\\\\.wrangler\\\\tmp\\\\bundle-gNh8F9\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,IAAM,OAAO,oBAAI,IAAI;AAErB,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACH;AACH,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS,CAAC;AAAA;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;AAnBS;AAqBT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,UAAM,CAAC,SAAS,IAAI,IAAI;AACxB,aAAS,SAAS,IAAI;AACtB,WAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,EAC/C;AACD,CAAC;;;ACeD,eAAe,uBAAuB,YAAsB,QAAwC;AACnG,QAAM,cAA6B,CAAC;AAEpC,aAAW,YAAY,YAAY;AAClC,QAAI;AACJ,cAAQ,IAAI,yCAAkC,QAAQ,EAAE;AAGxD,YAAM,MAAM,iDAAiD,QAAQ,iCAAiC,MAAM;AAE5G,cAAQ,IAAI,gCAAyB,IAAI,QAAQ,QAAQ,gBAAgB,CAAC,EAAE;AAC5E,cAAQ,IAAI,4BAAqB,OAAO,UAAU,GAAG,CAAC,CAAC,MAAM,OAAO,UAAU,OAAO,SAAS,CAAC,CAAC,EAAE;AAElG,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,SAAS;AAAA,UACR,cAAc;AAAA,QACf;AAAA,MACD,CAAC;AACD,cAAQ,IAAI,oBAAoB,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAI,UAAI,CAAC,SAAS,IAAI;AAC7F,cAAM,YAAY,MAAM,SAAS,KAAK;AACtC,gBAAQ,MAAM,mCAA8B,QAAQ,KAAK,SAAS,QAAQ,SAAS;AACnF,gBAAQ,MAAM,+BAA0B,SAAS;AACjD;AAAA,MACD;AAEA,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,cAAQ,IAAI,mBAAY,KAAK,UAAU,UAAU,CAAC,iBAAiB,QAAQ,EAAE;AAC7E,cAAQ,IAAI,sCAA+B,KAAK,gBAAgB,SAAS,EAAE;AAC3E,cAAQ,IAAI,kCAA2B,QAAQ,KAAK,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC;AAAK,UAAI,CAAC,KAAK,YAAY,KAAK,SAAS,WAAW,GAAG;AACtI,gBAAQ,IAAI,4BAA4B,QAAQ,EAAE;AAClD;AAAA,MACD;AAGA,YAAM,mBAAmB,KAAK,SAC5B,OAAO,aAAW;AAClB,cAAM,aAAa,QAAQ,WAAW,QAAQ,YAAY;AAC1D,YAAI,CAAC,YAAY;AAChB,kBAAQ,IAAI,qCAAqC,QAAQ,KAAK,EAAE;AAAA,QACjE;AACA,eAAO;AAAA,MACR,CAAC,EACA,IAAI,cAAY;AAAA,QAChB,GAAG;AAAA,QACH;AAAA,MACD,EAAE;AAEH,cAAQ,IAAI,eAAe,iBAAiB,MAAM,8BAA8B,QAAQ,EAAE;AAC1F,kBAAY,KAAK,GAAG,gBAAgB;AAAA,IACrC,SAAS,OAAO;AACf,cAAQ,MAAM,oCAAoC,QAAQ,KAAK,KAAK;AAAA,IACrE;AAAA,EACD;AAEA,SAAO;AACR;AAvDe;AA+Df,eAAe,0BAA0B,SAAsB,IAAyB;AACvF,MAAI;AACH,YAAQ,IAAI,+CAAwC,QAAQ,KAAK,EAAE;AAGnE,UAAM,iBAAiB,QAAQ,WAAW,QAAQ,eAAe;AACjE,UAAM,SAAS;AAAA;AAAA,SAER,QAAQ,KAAK;AAAA,WACX,eAAe,UAAU,GAAG,GAAI,CAAC;AAAA,UAClC,QAAQ,OAAO,IAAI;AAAA;AAAA;AAK3B,UAAM,YAAY;AAClB,UAAM,WAAW,MAAM,GAAG,IAAI,WAAkB;AAAA,MAC/C,QAAQ,GAAG,MAAM;AAAA;AAAA;AAAA,IAClB,CAAC;AAGD,QAAI;AACJ,QAAI,OAAO,aAAa,UAAU;AACjC,gBAAU,SAAS,KAAK;AAAA,IACzB,WAAW,YAAY,OAAO,aAAa,YAAY,cAAc,UAAU;AAC9E,gBAAW,SAAiB,UAAU,KAAK;AAAA,IAC5C,OAAO;AACN,gBAAU,GAAG,QAAQ,KAAK;AAAA,IAC3B;AAEA,YAAQ,IAAI,6BAAwB,QAAQ,UAAU,GAAG,GAAG,CAAC,KAAK;AAClE,WAAO;AAAA,EAER,SAAS,OAAO;AACf,YAAQ,MAAM,qCAAgC,QAAQ,KAAK,MAAM,KAAK;AAGtE,UAAM,kBAAkB,sBAAsB,OAAO;AACrD,YAAQ,IAAI,qCAA8B,gBAAgB,UAAU,GAAG,GAAG,CAAC,KAAK;AAChF,WAAO;AAAA,EACR;AACD;AAzCe;AA8Cf,SAAS,sBAAsB,SAA8B;AAC5D,QAAM,cAAc,QAAQ,eAAe;AAC3C,QAAM,UAAU,QAAQ,WAAW;AAGnC,MAAI,eAAe,YAAY,SAAS,MAAM,gBAAgB,aAAa;AAE1E,WAAO,GAAG,QAAQ,OAAO,IAAI,aAAa,WAAW;AAAA,EACtD,WAAW,WAAW,QAAQ,SAAS,IAAI;AAE1C,UAAM,YAAY,QAAQ,MAAM,QAAQ;AACxC,UAAM,gBAAgB,UAAU,CAAC,GAAG,KAAK;AACzC,QAAI,iBAAiB,cAAc,SAAS,IAAI;AAC/C,aAAO,GAAG,QAAQ,OAAO,IAAI,KAAK,aAAa;AAAA,IAChD;AAAA,EACD;AAGA,SAAO,GAAG,QAAQ,OAAO,IAAI,KAAK,QAAQ,KAAK;AAChD;AAnBS;AAwBT,eAAe,YAAY,SAAkB,KAA6B;AACzE,MAAI;AAEH,UAAM,OAAO,MAAM,QAAQ,KAAK,EAAE,MAAM,OAAO,CAAC,EAAE;AAClD,UAAM,SAAS,KAAK,UAAU,IAAI;AAElC,QAAI,CAAC,QAAQ;AACZ,aAAO,SAAS,KAAK;AAAA,QACpB,SAAS;AAAA,QACT,SAAS;AAAA,UACR,QAAQ;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IACnB;AAGA,UAAM,aAAa,KAAK,cAAc,CAAC,cAAc,SAAS;AAE9D,YAAQ,IAAI,oCAAoC,WAAW,KAAK,IAAI,CAAC,EAAE;AACvE,YAAQ,IAAI,qBAAqB,OAAO,UAAU,GAAG,CAAC,CAAC,MAAM,OAAO,UAAU,OAAO,SAAS,CAAC,CAAC,EAAE;AAGlG,UAAM,WAAW,MAAM,uBAAuB,YAAY,MAAM;AAEhE,YAAQ,IAAI,2BAA2B,SAAS,MAAM,EAAE;AAExD,QAAI,SAAS,WAAW,GAAG;AAC1B,aAAO,SAAS,KAAK;AAAA,QACpB,SAAS;AAAA,QACT,gBAAgB;AAAA,UACf;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA;AAAA,QACA,WAAW;AAAA,UACV,cAAc,GAAG,OAAO,UAAU,GAAG,CAAC,CAAC,MAAM,OAAO,UAAU,OAAO,SAAS,CAAC,CAAC;AAAA,UAChF,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QACnC;AAAA,MACD,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IACnB;AAGA,UAAM,YAAY,CAAC;AACnB,eAAW,WAAW,SAAS,MAAM,GAAG,CAAC,GAAG;AAC3C,YAAM,UAAU,MAAM,0BAA0B,SAAS,IAAI,EAAE;AAC/D,gBAAU,KAAK;AAAA,QACd,OAAO,QAAQ;AAAA,QACf;AAAA,QACA,KAAK,QAAQ;AAAA,QACb,QAAQ,QAAQ,OAAO;AAAA,QACvB,UAAW,QAAgB,YAAY;AAAA,MACxC,CAAC;AAAA,IACF;AAEA,WAAO,SAAS,KAAK;AAAA,MACpB,SAAS,wBAAwB,SAAS,MAAM;AAAA,MAChD;AAAA,MACA,eAAe,SAAS;AAAA,MACxB,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACd,CAAC;AAAA,EAEF,SAAS,OAAO;AACf,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,WAAO,SAAS,KAAK;AAAA,MACpB,SAAS;AAAA,MACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,IAC7D,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACnB;AACD;AAzEe;AA2Ef,eAAe,gBAAgB,SAAkB,KAA6B;AAC7E,UAAQ,IAAI,wBAAwB;AAEpC,MAAI;AACH,UAAM,OAAO,MAAM,QAAQ,KAAK;AAChC,YAAQ,IAAI,iBAAiB,IAAI;AAEjC,UAAM,EAAE,OAAO,WAAW,IAAI;AAG9B,QAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,UAAU,KAAK,WAAW,WAAW,GAAG;AACpE,cAAQ,IAAI,mBAAmB;AAC/B,aAAO,SAAS,KAAK,EAAE,SAAS,+DAA+D,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAClH;AAGA,UAAM,aAAa;AACnB,QAAI,CAAC,WAAW,KAAK,KAAK,GAAG;AAC5B,cAAQ,IAAI,sBAAsB;AAClC,aAAO,SAAS,KAAK,EAAE,SAAS,wBAAwB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3E;AAEA,YAAQ,IAAI,8CAA8C,KAAK,EAAE;AAEjE,UAAM,iBAAiB,KAAK,UAAU,UAAU;AAKhD,UAAM,OAAO,IAAI,GAAG;AAAA,MACnB;AAAA,IACD;AAEA,UAAM,SAAS,MAAM,KAAK,KAAK,OAAO,cAAc,EAAE,IAAI;AAC1D,YAAQ,IAAI,8BAA8B,MAAM;AAEhD,QAAI,OAAO,SAAS;AACnB,aAAO,SAAS,KAAK,EAAE,SAAS,oCAAoC,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IACvF,OAAO;AACN,cAAQ,MAAM,8BAA8B,OAAO,KAAK;AACxD,aAAO,SAAS,KAAK,EAAE,SAAS,6BAA6B,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAChF;AAAA,EACD,SAAS,GAAG;AACX,YAAQ,MAAM,6BAA6B,CAAC;AAE5C,QAAI,aAAa,aAAa;AAC7B,aAAO,SAAS,KAAK,EAAE,SAAS,gCAAgC,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IACnF;AAEA,WAAO,SAAS,KAAK,EAAE,SAAS,qCAAqC,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACxF;AACD;AAnDe;AAsDf,IAAM,eAAeoMrB,IAAO,cAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,MAAM,MAAM,SAAkB,KAAU,KAA0C;AACjF,YAAQ,IAAI,WAAW,QAAQ,MAAM,IAAI,QAAQ,GAAG,EAAE;AACtD,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,YAAQ,IAAI,qBAAqB,IAAI,QAAQ,EAAE;AAG/C,QAAI,IAAI,SAAS,WAAW,OAAO,GAAG;AACrC,cAAQ,IAAI,4BAA4B;AAGxC,UAAI,IAAI,aAAa,oBAAoB,QAAQ,WAAW,QAAQ;AACnE,gBAAQ,IAAI,2CAA2C;AACvD,eAAO,MAAM,gBAAgB,SAAS,GAAG;AAAA,MAC1C;AAGA,UAAI,IAAI,aAAa,gBAAgB,QAAQ,WAAW,OAAO;AAC9D,gBAAQ,IAAI,+BAA+B;AAC3C,eAAO,SAAS,KAAK,EAAE,SAAS,6BAA6B,YAAW,oBAAI,KAAK,GAAE,YAAY,EAAE,CAAC;AAAA,MACnG;AAGA,UAAI,IAAI,aAAa,oBAAoB,QAAQ,WAAW,QAAQ;AACnE,gBAAQ,IAAI,qCAAqC;AACjD,eAAO,MAAM,YAAY,SAAS,GAAG;AAAA,MACtC;AAGA,UAAI,IAAI,aAAa,0BAA0B,QAAQ,WAAW,QAAQ;AACzE,gBAAQ,IAAI,uCAAuC;AACnD,eAAO,MAAM,yBAAyB,GAAG;AAAA,MAC1C;AAGA,aAAO,IAAI,SAAS,uBAAuB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3D;AAGA,QAAI,IAAI,aAAa,KAAK;AACzB,cAAQ,IAAI,8BAA8B;AAC1C,aAAO,IAAI,SAAS,cAAc;AAAA,QACjC,SAAS,EAAE,gBAAgB,YAAY;AAAA,MACxC,CAAC;AAAA,IACF;AAGA,YAAQ,IAAI,uBAAuB;AACnC,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,OAAuB,KAAU,KAAsC;AACtF,YAAQ,IAAI,yBAAyB,IAAI,KAAK,MAAM,aAAa,CAAC,iCAAiC;AAEnG,QAAI;AAEH,UAAI,CAAC,IAAI,cAAc;AACtB,gBAAQ,MAAM,kDAAkD;AAChE;AAAA,MACD;AAGA,cAAQ,IAAI,qCAAqC;AACjD,YAAM,cAAc,MAAM,IAAI,GAAG,QAAQ,qCAAqC,EAAE,IAAI;AAEpF,UAAI,CAAC,YAAY,SAAS;AACzB,gBAAQ,MAAM,qCAAqC;AACnD;AAAA,MACD;AAEA,YAAM,QAAQ,YAAY;AAC1B,cAAQ,IAAI,SAAS,MAAM,MAAM,mBAAmB;AAGpD,iBAAW,QAAQ,OAAO;AACzB,cAAM,sBAAsB,MAAM,GAAG;AAAA,MACtC;AAEA,cAAQ,IAAI,8CAA8C;AAAA,IAC3D,SAAS,OAAO;AACf,cAAQ,MAAM,6CAA6C,KAAK;AAAA,IACjE;AAAA,EACD;AACD;AAKA,eAAe,sBAAsB,MAAW,KAAyB;AACxE,MAAI;AACH,UAAM,QAAQ,KAAK;AACnB,UAAM,aAAa,KAAK,MAAM,KAAK,UAAoB;AAEvD,YAAQ,IAAI,6BAA6B,KAAK,qBAAqB,WAAW,KAAK,IAAI,CAAC,EAAE;AAG1F,UAAM,WAAW,MAAM,uBAAuB,YAAY,IAAI,YAAY;AAE1E,QAAI,SAAS,WAAW,GAAG;AAC1B,cAAQ,IAAI,yBAAyB,KAAK,EAAE;AAC5C;AAAA,IACD;AAEA,YAAQ,IAAI,SAAS,SAAS,MAAM,iBAAiB,KAAK,EAAE;AAG5D,UAAM,YAA2E,CAAC;AAElF,eAAW,WAAW,SAAS,MAAM,GAAG,EAAE,GAAG;AAC5C,YAAM,UAAU,MAAM,0BAA0B,SAAS,IAAI,EAAE;AAC/D,gBAAU,KAAK;AAAA,QACd;AAAA,QACA;AAAA,QACA,UAAW,QAAgB,YAAY;AAAA,MACxC,CAAC;AAAA,IACF;AAGA,UAAM,aAAa,iBAAiB,OAAO,SAAS;AAGpD,YAAQ,IAAI,4BAA4B,KAAK,GAAG;AAChD,YAAQ,IAAI,UAAU;AACtB,YAAQ,IAAI,6BAA6B;AAAA,EAE1C,SAAS,OAAO;AACf,YAAQ,MAAM,yCAAyC,KAAK;AAAA,EAC7D;AACD;AAxCe;AA6Cf,SAAS,iBAAiB,OAAe,WAAkF;AAC1H,QAAM,QAAO,oBAAI,KAAK,GAAE,aAAa;AAGrC,QAAM,uBAA4F,CAAC;AAEnG,aAAW,QAAQ,WAAW;AAC7B,QAAI,CAAC,qBAAqB,KAAK,QAAQ,GAAG;AACzC,2BAAqB,KAAK,QAAQ,IAAI,CAAC;AAAA,IACxC;AACA,yBAAqB,KAAK,QAAQ,EAAE,KAAK;AAAA,MACxC,SAAS,KAAK;AAAA,MACd,SAAS,KAAK;AAAA,IACf,CAAC;AAAA,EACF;AAEA,MAAI,aAAa,yDAA6C,IAAI;AAAA;AAClE,gBAAc,kBAAW,KAAK;AAAA;AAAA;AAG9B,aAAW,CAAC,UAAU,KAAK,KAAK,OAAO,QAAQ,oBAAoB,GAAG;AACrE,kBAAc,aAAM,SAAS,YAAY,CAAC;AAAA;AAC1C,kBAAc,GAAG,IAAI,OAAO,SAAS,SAAS,CAAC,CAAC;AAAA;AAAA;AAEhD,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,YAAM,EAAE,SAAS,QAAQ,IAAI,MAAM,CAAC;AACpC,oBAAc,GAAG,IAAI,CAAC,KAAK,QAAQ,KAAK;AAAA;AACxC,oBAAc,4BAAqB,OAAO;AAAA;AAC1C,oBAAc,2BAAoB,QAAQ,GAAG;AAAA;AAC7C,oBAAc,wBAAiB,QAAQ,OAAO,IAAI;AAAA;AAAA;AAAA,IACnD;AAAA,EACD;AAEA,gBAAc;AAAA;AAAA;AACd,gBAAc;AAAA;AAEd,SAAO;AACR;AArCS;AA0CT,eAAe,yBAAyB,KAA6B;AACpE,MAAI;AAEH,UAAM,aAAa,IAAI,gBAAgB;AAGvC,UAAM,cAAc,MAAM,IAAI,GAAG,QAAQ,6CAA6C,EAAE,IAAI;AAE5F,QAAI,CAAC,YAAY,WAAW,YAAY,QAAQ,WAAW,GAAG;AAC7D,aAAO,SAAS,KAAK;AAAA,QACpB,SAAS;AAAA,MACV,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IACnB;AAEA,UAAM,OAAO,YAAY,QAAQ,CAAC;AAClC,UAAM,QAAQ,KAAK;AACnB,UAAM,aAAa,KAAK,MAAM,KAAK,UAAoB;AAGvD,QAAI,CAAC,IAAI,cAAc;AACtB,aAAO,MAAM,iBAAiB,OAAO,YAAY,GAAG;AAAA,IACrD;AAGA,UAAM,sBAAsB,MAAM,GAAG;AAErC,WAAO,SAAS,KAAK;AAAA,MACpB,SAAS,yCAAyC,KAAK;AAAA,MACvD;AAAA,IACD,CAAC;AAAA,EAEF,SAAS,OAAO;AACf,YAAQ,MAAM,wCAAwC,KAAK;AAC3D,WAAO,SAAS,KAAK;AAAA,MACpB,SAAS;AAAA,MACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,IAC7D,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACnB;AACD;AAtCe;AA2Cf,eAAe,iBAAiB,OAAe,YAAsB,KAA6B;AACjG,MAAI;AAEH,UAAM,eAA8B;AAAA,MACnC;AAAA,QACC,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,QACT,KAAK;AAAA,QACL,QAAQ,EAAE,MAAM,kBAAkB;AAAA,QAClC,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,MACrC;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,QACT,KAAK;AAAA,QACL,QAAQ,EAAE,MAAM,uBAAuB;AAAA,QACvC,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,MACrC;AAAA,IACD;AAGA,UAAM,YAA2E,CAAC;AAElF,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC7C,YAAM,UAAU,aAAa,CAAC;AAC9B,YAAM,WAAW,WAAW,IAAI,WAAW,MAAM;AAEjD,YAAM,UAAU,MAAM,0BAA0B,SAAS,IAAI,EAAE;AAC/D,gBAAU,KAAK;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF;AAGA,UAAM,aAAa,iBAAiB,OAAO,SAAS;AAEpD,YAAQ,IAAI,4BAA4B;AACxC,YAAQ,IAAI,UAAU;AAEtB,WAAO,SAAS,KAAK;AAAA,MACpB,SAAS,8CAA8C,KAAK;AAAA,MAC5D;AAAA,MACA,mBAAmB,aAAa;AAAA,IACjC,CAAC;AAAA,EAEF,SAAS,OAAO;AACf,YAAQ,MAAM,wCAAwC,KAAK;AAC3D,WAAO,SAAS,KAAK;AAAA,MACpB,SAAS;AAAA,MACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,IAC7D,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACnB;AACD;AAxDe;;;ACttBf,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
